params {
  config_profile_description = 'SA Pathology Public Health Lab HPC cluster profile.'
  config_profile_contact     = 'Jacob May (jacob.may@sa.gov.au)'
  config_profile_url         = "https://www.sapathology.gov.au"
  max_memory      = 375.GB
  max_cpus        = 128
  max_time        = 5.h
}
process {
  executor        = 'slurm'
  queue           = 'batch'
  maxRetries      = 2
 
  cpus            = { check_max( 2 * task.attempt, 'cpus') }
  memory          = { check_max( 1.GB * task.attempt, 'memory') }
  time            = { check_max( 10.m * task.attempt, 'time') }


}
executor {
  queueSize       = 50
  submitRateLimit = '10 sec'
}

apptainer {
  enabled         = true
  autoMounts      = true
  beforeScript    = 'export PATH=/apps/opt/apptainer/latest/bin:${PATH}'
  cacheDir        = '/scratch/shared/simg'
}
cleanup = true
profiles {
  debug {
    cleanup = false
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}